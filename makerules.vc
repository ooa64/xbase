######################################################################
# a bug fix needed for VC++ 6.0's nmake tool.
#
# Reset the version *string* back to the integer it's supposed to be.
# More entries will have to be made here for all subsiquent nmake
# versions until Microsoft fixes it.
#
_NMAKE_VER  = $(_NMAKE_VER:6.00.8168.0=600)
######################################################################

!ifndef DEBUG
DEBUG = 0
!endif

!ifndef STATIC_BUILD
STATIC_BUILD = 1
!endif

!ifndef MSVCRT
MSVCRT = 1
!endif

#######################################################################

VCTOOLS     = $(VCINSTALLDIR)
SDKTOOLS    = $(SDKINSTALLDIR)

!if "$(DEBUG)" == "1"
DEFINES     = $(DEFINES) -D_DEBUG=1 -DDEBUG=1
DEBUG       = 1
DBGX        = d
!else
DEFINES     = $(DEFINES) -DNDEBUG=1 -DNODEBUG=1
DEBUG       =
DBGX        =
!endif

!if "$(STATIC_BUILD)" == "1"
STATIC_BUILD= 1
DLLX        = s
!else
STATIC_BUILD=
DLLX        =
!endif

!if "$(MACHINE)" == ""
MACHINE     = IX86
!if "$(PLATFORM)" == "x64"
MACHINE     = IA64
!endif
!endif

ccXX      = cl -c
clXX      = cl
linkXX    = link
libXX     = lib

cvtres32  = "$(VCTOOLS)\bin\cvtres.exe"
rc32      = "$(SDKTOOLS)\bin\rc.exe"
cinclude  = -I"$(VCTOOLS)\include"
libpath32 = /LIBPATH:"$(VCTOOLS)\lib" /LIBPATH:"$(SDKTOOLS)\lib"
libpath64 = /LIBPATH:"$(VCTOOLS)\lib\amd64" /LIBPATH:"$(SDKTOOLS)\lib\"

RMDIR       = rmdir
MKDIR       = mkdir
RM          = del

######################################################################
# Compile flags
######################################################################

!if "$(DEBUG)" == "1"
cdebug = -Z7 -Od -RTC1
!else
!if "$(STATIC_BUILD)" == "1"
cdebug = -O2 -Gs
!else
cdebug = -O2 -Gs -GD
!endif
!endif

# declarations common to all compiler options
cflags = -W3 -nologo $(CFLAGS)

# to include winsock2.h, not winsock.h
cflags = $(cflags) -D_WIN32_WINNT=0x0400 -DWINVER=0x0400

cflags = $(cflags) -D_CONSOLE -D_MBCS -DWIN32 -D_WIN32_ -D__WIN32__ -D__MSVC__ -D__VISUALC__

cvarsdll = -MD$(DBGX)

!if "$(STATIC_BUILD)" == "1"
cvarsdll = $(cvarsdll) -DSTATIC_BUILD
!else
cvarsdll = $(cvarsdll)
!endif

######################################################################
# Link flags
######################################################################

!IF "$(DEBUG)" == "1"
ldebug  = -debug:full -debugtype:cv
ldebug  = -debug
!ELSE
ldebug  = -release -opt:ref
!ENDIF

# declarations common to all linker options
lflags  = /NODEFAULTLIB /NOLOGO /INCREMENTAL:NO /MACHINE:$(PLATFORM)

# declarations for use on Intel i386, i486, and Pentium systems
!IF "$(MACHINE)" == "IX86"
dlllflags = $(lflags) -dll
!ELSE IF "$(MACHINE)" == "IA64"
dlllflags = $(lflags) -dll
!ELSE
dlllflags = $(lflags) -dll
!ENDIF

conlflags = $(lflags) -subsystem:console -entry:mainCRTStartup
guilflags = $(lflags) -subsystem:windows -entry:WinMainCRTStartup

libc = libc$(DBGX).lib oldnames.lib
libcdll = msvcrt$(DBGX).lib msvcprt$(DBGX).lib oldnames.lib

baselibs   = kernel32.lib $(optlibs) advapi32.lib user32.lib
winlibs    = $(baselibs) gdi32.lib comdlg32.lib winspool.lib

guilibs    = $(libc) $(winlibs)
conlibs    = $(libc) $(baselibs)
guilibsdll = $(libcdll) $(winlibs)
conlibsdll = $(libcdll) $(baselibs)

.cpp.obj ::
    $(clXX) -c -EHsc $(cdebug) $(cflags) $(cvarsdll) $(cinclude) $(DEFINES) $<

.c.obj ::
    $(clXX) -c $(cdebug) $(cflags) $(cvarsdll) $(cinclude) $(DEFINES) $<

.cpp{$(MACHINE)}.obj ::
    $(clXX) -c -EHsc $(cdebug) $(cflags) $(cvarsdll) $(cinclude) $(DEFINES) -Fo$(MACHINE)\ $<

.c{$(MACHINE)}.obj ::
    $(clXX) -c $(cdebug) $(cflags) $(cvarsdll) $(cinclude) $(DEFINES) -Fo$(MACHINE)\ $<

.SUFFIXES: .cpp .c
